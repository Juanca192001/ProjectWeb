"https://github.com/Juanca192001/ProjectWeb
"Descripci√≥n del Proyecto
Este proyecto consiste en una p√°gina web desarrollada para un concesionario de autom√≥viles. La aplicaci√≥n est√° construida utilizando Django, un framework de desarrollo web en Python, y actualmente incluye las funcionalidades b√°sicas necesarias para gestionar usuarios y sesiones. Aunque el proyecto est√° en sus primeras etapas, ya hemos implementado las siguientes p√°ginas y caracter√≠sticas:

Home: P√°gina principal del concesionario.

Login: Permite a los usuarios iniciar sesi√≥n.

Register: Permite a los nuevos usuarios registrarse en la plataforma.

Logout: Opci√≥n para cerrar sesi√≥n de manera segura.

Funcionalidades Implementadas
1. Home
La p√°gina principal act√∫a como el punto de entrada al sitio web del concesionario. Aqu√≠ se puede mostrar informaci√≥n general sobre el concesionario, como promociones, veh√≠culos destacados o contacto b√°sico.

2. Login
La funcionalidad de inicio de sesi√≥n permite que los usuarios registrados accedan a su cuenta. Esta p√°gina incluye:

Un formulario con campos para el correo electr√≥nico y la contrase√±a.

Validaci√≥n de credenciales para garantizar la seguridad.

3. Register
La p√°gina de registro permite a los nuevos usuarios crear una cuenta en la plataforma. Incluye:

Un formulario con campos como nombre, correo electr√≥nico y contrase√±a.

Validaci√≥n b√°sica para evitar errores durante el registro.

4. Logout
Los usuarios pueden cerrar sesi√≥n desde cualquier parte del sitio web, garantizando que su informaci√≥n est√© protegida cuando dejan de usar la plataforma.

Estructura del Proyecto
El proyecto est√° organizado en las siguientes carpetas y archivos principales:

DjangoProject: Contiene la configuraci√≥n general del proyecto Django.

ProyectoWeb: Incluye las vistas y URLs relacionadas con las p√°ginas principales (home, login, register).

User: Maneja la l√≥gica relacionada con los usuarios, como autenticaci√≥n y gesti√≥n de sesiones.

templates: Carpeta donde se almacenan los archivos HTML para las diferentes p√°ginas (home, login, register).

db.sqlite3: Base de datos SQLite utilizada para almacenar informaci√≥n de usuarios y sesiones.

Dockerfile & docker-compose.yml: Archivos para configurar y ejecutar el proyecto en contenedores Docker.

manage.py: Script principal para gestionar el proyecto Django.

Instalaci√≥n y Configuraci√≥n
Requisitos Previos
Aseg√∫rate de tener instalados:

Python 3.12 o superior

Django

Docker

Descripci√≥n del Proyecto
Este proyecto consiste en una p√°gina web dise√±ada para un concesionario de autom√≥viles. La aplicaci√≥n permite a los usuarios explorar una lista de coches disponibles, iniciar sesi√≥n, registrarse y cerrar sesi√≥n. Actualmente, hemos implementado las funcionalidades b√°sicas para gestionar usuarios y mostrar informaci√≥n sobre los veh√≠culos.

La interfaz es sencilla y moderna, con un dise√±o minimalista que incluye una tabla donde se muestran los detalles de los coches disponibles. Los usuarios pueden interactuar con la p√°gina mediante botones de navegaci√≥n para iniciar sesi√≥n o registrarse.

Funcionalidades Implementadas
1. Home (Lista de Coches)
La p√°gina principal muestra una tabla con informaci√≥n detallada sobre los coches disponibles en el concesionario. Los datos que se presentan incluyen:

Nombre: Nombre del modelo del coche.

Ruedas: Estilo o tipo de ruedas.

Motor: Especificaciones del motor (tipo de combustible, capacidad y potencia).

Interior: Material del interior del coche.

Color: Color del coche, acompa√±ado de un indicador visual.

En la parte superior derecha, se encuentran dos botones:

Iniciar Sesi√≥n: Redirige al formulario de inicio de sesi√≥n.

Registrarse: Redirige al formulario para crear una nueva cuenta.

2. Login
La funcionalidad de inicio de sesi√≥n permite que los usuarios registrados accedan a su cuenta. Incluye:

Un formulario con campos para el correo electr√≥nico y la contrase√±a.

Validaci√≥n de credenciales para garantizar que solo usuarios autorizados puedan acceder.

3. Register
La p√°gina de registro permite a los nuevos usuarios crear una cuenta en la plataforma. Incluye:

Un formulario con campos como nombre, correo electr√≥nico y contrase√±a.

Validaci√≥n b√°sica para evitar errores durante el registro.

4. Logout
Los usuarios pueden cerrar sesi√≥n desde cualquier parte del sitio web, garantizando que su informaci√≥n est√© protegida cuando dejan de usar la plataforma.

Dise√±o Visual
La interfaz utiliza un esquema de colores oscuros con texto blanco para facilitar la lectura y ofrecer un dise√±o moderno. La tabla est√° bien estructurada, lo que permite a los usuarios visualizar r√°pidamente las especificaciones de cada coche. Los colores seleccionados para los veh√≠culos se representan tanto en texto como en un cuadrado visual al lado del nombre del color.

Estructura del Proyecto
El proyecto est√° organizado en las siguientes carpetas y archivos principales:

DjangoProject: Contiene la configuraci√≥n general del proyecto Django.

ProyectoWeb: Incluye las vistas y URLs relacionadas con las p√°ginas principales (home, login, register).

templates: Carpeta donde se almacenan los archivos HTML para las diferentes p√°ginas (home, login, register).

static: Archivos CSS y JS utilizados para el dise√±o visual.

db.sqlite3: Base de datos SQLite utilizada para almacenar informaci√≥n de usuarios y sesiones.

manage.py: Script principal para gestionar el proyecto Django."

Lamentablemente la cofiguraci√≥n no ha sido 100% correcta."



--------------------------------------------------------------------------PARTE 2----------------------------------------------------------------------------------------------------

Parte del readme deliverable 2:
Implementaci√≥n de las pesta√±as de Configura tu veh√≠culo (personalizaci√≥n del veh√≠culo que desees y est√© disponible) y de Tus configuraciones
(configuraciones ya realizadas por el usuario al haber iniciado sesi√≥n y haber guardado dicha configuraci√≥n).

üìã Descripci√≥n
Esta pr√°ctica consisti√≥ en la implementaci√≥n de dos pesta√±as principales en la interfaz de usuario de una aplicaci√≥n orientada a la personalizaci√≥n de veh√≠culos. Las pesta√±as agregadas fueron:

Configura tu Veh√≠culo

Tus Configuraciones

Breve correcci√≥n del login y del register (antes se logueaba el usuario con el correo, ahora se sigue usando el correo, pero validando los datos contra la base de datos de Django).

Estas secciones permiten a los usuarios dise√±ar su veh√≠culo ideal y revisar o modificar las configuraciones previamente guardadas, e incluso eliminarlas, siempre y cuando hayas iniciado sesi√≥n.

üß© Funcionalidades Implementadas

üîß Configura tu Veh√≠culo
Primera selecci√≥n del tipo de marca (3 a escoger)

En el caso de Audi y BMW, los modelos disponibles son SUV, Berlina y Coup√©.
En el caso de Volkswagen, el modelo Coup√© se reemplaza por Compactos.

Selecci√≥n de modelo, color, tipo de motor y accesorios (llantas de 16,17 y 18 pulgadas, color del interior personalizable...).

Validaci√≥n de las opciones disponibles seg√∫n el modelo elegido.

Bot√≥n para guardar la configuraci√≥n.

üìÇ Tus Configuraciones
Lista de configuraciones previamente guardadas por el usuario, por el nombre ya elegido por parte del usuario.

Opci√≥n para editar o eliminar configuraciones.

Actualizaci√≥n de dicha configuraci√≥n.

üõ†Ô∏è Tecnolog√≠as Utilizadas
(Personaliza esta secci√≥n con tu stack real)

Frontend: HTML, CSS, JavaScript.
API: CarAPI.

üîê Cambios T√©cnicos Relevantes

üìß Inicio de sesi√≥n con correo y base de datos de Django
Anteriormente, el inicio de sesi√≥n (login) se realizaba validando directamente el correo electr√≥nico de forma local o mediante otro sistema externo. Como parte de esta pr√°ctica, se mantuvo el uso del correo como m√©todo de autenticaci√≥n, pero ahora se usa validando los datos contra la base de datos de Django.

Esto significa que:

Los usuarios y sus configuraciones personalizadas ahora se gestionan desde el sistema de usuarios de Django.

Las credenciales (correo y contrase√±a) se validan contra los datos almacenados en la base de datos del proyecto Django.

Se mejora la seguridad, escalabilidad y mantenibilidad de la autenticaci√≥n.

Permite relacionar f√°cilmente cada configuraci√≥n de veh√≠culo con un usuario registrado.

Este cambio sienta las bases para futuras funcionalidades como:

Gesti√≥n de sesiones de usuario.

Recuperaci√≥n de configuraciones en diferentes dispositivos.

Personalizaci√≥n persistente y segura.


****Esta pr√°ctica permiti√≥ mejorar la experiencia del usuario mediante la incorporaci√≥n de funcionalidades clave como la personalizaci√≥n del veh√≠culo y la gesti√≥n de configuraciones 

guardadas. Adem√°s, con la integraci√≥n del login usando la base de datos de Django, se sentaron bases m√°s s√≥lidas para un sistema de autenticaci√≥n m√°s seguro y escalable. Estas mejoras 

aportan valor al desarrollo general de la aplicaci√≥n y abren camino a futuras ampliaciones.




